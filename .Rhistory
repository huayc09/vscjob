sh.name
sh.name <- paste0(
Sys.Date(),
"_cellranger_",
stri_rand_strings(1,6),
".sh"
)
sh <- file(sh.name)
writeLines(pbs)
close(sh)
sh.name
sh <- file(sh.name)
?file
sh
writeLines(pbs, sh)
writeLines(pbs, sh)
close(sh)
?writeLines
for (i in seq_along(IDs)) {
# check.sys.dir.exist(fastqs[i])
code.cellranger[i] <- paste0(
"cellranger count --id=",IDs[i],
" --transcriptome=",ref,
" --fastqs=",fastqs[i],
" --expect-cells=5000 --jobmode=local --localcores=36 --localmem=180\n"
)
}
code.cellranger
sh <- file(sh.name)
writeLines(pbs, sh)
close(sh)
sh <- file(sh.name)
writeLines(pbs, sh)
writeLines(pbs, sh)
writeLines(pbs, sh)
writeLines(sh.name, sh)
close(sh)
file.create(sh.name)
cat(pbs, file = sh.name)
cat(pbs, file = sh.name)
cat(pbs, file = sh.name)
cat(pbs, file = sh.name, append = T)
cat(pbs, file = sh.name, append = T)
cat(pbs, file = sh.name, append = F)
cat(
"export PATH=$PATH:",
program.path
)
cat(
"export PATH=$PATH:",
program.path,
"\n"
)
cat(
"export PATH=$PATH:",
program.path,
"\n", file = sh.name, append = T
)
cat(
"cd", getwd(),
file = sh.name, append = T
)
sh.name <- paste0(
Sys.Date(),
"_cellranger_",
stri_rand_strings(1,6),
".sh"
)
file.create(sh.name)
cat(pbs, file = sh.name)
cat(
"export PATH=$PATH:",
program.path, "\n",
file = sh.name, append = T
)
cat(
"cd", getwd(), "\n",
file = sh.name, append = T
)
cat(code.cellranger)
cat(
code.cellranger,
file = sh.name, append = T
)
# check.sys.dir.exist(fastqs[i])
code.cellranger[i] <- paste0(
"cellranger count --id=",IDs[i],
" --transcriptome=",ref,
" --fastqs=",fastqs[i],
" --expect-cells=5000 --jobmode=local --localcores=36 --localmem=180"
)
cat(
code.cellranger, sep = "\n",
file = sh.name, append = T
)
file.create(sh.name)
cat(pbs, file = sh.name)
cat(
"export PATH=$PATH:",
program.path, "\n",
file = sh.name, append = T
)
cat(
"cd", getwd(), "\n",
file = sh.name, append = T
)
cat(
code.cellranger, sep = "",
file = sh.name, append = T
)
command <- paste0(
"cd ", getwd(),
"\nqsub ",
sh.name
)
command
cat(sh.name)
cat(command)
for (i in seq_along(IDs)) {
sh.name <- paste0(
Sys.Date(),
"_cellranger_",
IDs[i],"_",
stri_rand_strings(1,6),
".sh"
)
file.create(sh.name)
cat(pbs, file = sh.name)
cat(
"export PATH=$PATH:",
program.path, "\n",
file = sh.name, append = T
)
cat(
"cd", getwd(), "\n",
file = sh.name, append = T
)
cat(
code.cellranger[i], sep = "",
file = sh.name, append = T
)
command <- paste0(
"cd ", getwd(),
"\nqsub ",
sh.name
)
# system(command)
}
RunCellranger <- function(
fastqs,
IDs,
spe,
program.path = NULL,
ref = NULL,
walltime = NULL,
project = NULL,
nodes = NULL,
ppn = NULL,
email = NULL,
sequential = F
) {
library(stringi)
if(!spe %in% c("mouse","human")) {
stop("'spe' must be 'mouse' or 'human'")
}
if(length(fastqs) != length(IDs)) {
stop("'fastqs' and 'IDs' must be the same length.")
}
pbs <- pbs.string(
walltime = walltime,
project = project,
nodes = nodes,
ppn = ppn,
email = email
)
message("PBS arguments:\n",pbs)
library(rlang)
opt <- vscjob_LoadConfig(global = F)
program.path <- program.path %||% opt$cellranger.program.path
if(is.null(ref)) {
ref <- switch(
spe,
mouse = opt$cellranger.ref.mouse,
human = opt$cellranger.ref.human)
}
message("CellRanger path: ", program.path, "\n",
"Reference genome path: ", ref, "\n")
check.sys.dir.exist(program.path)
check.sys.dir.exist(ref)
code.cellranger <- vector()
for (i in seq_along(IDs)) {
check.sys.dir.exist(fastqs[i])
code.cellranger[i] <- paste0(
"cellranger count --id=",IDs[i],
" --transcriptome=",ref,
" --fastqs=",fastqs[i],
" --expect-cells=5000 --jobmode=local --localcores=36 --localmem=180"
)
}
if(sequential) {
sh.name <- paste0(
Sys.Date(),
"_cellranger_",
stri_rand_strings(1,6),
".sh"
)
file.create(sh.name)
cat(pbs, file = sh.name)
cat(
"export PATH=$PATH:",
program.path, "\n",
file = sh.name, append = T
)
cat(
"cd", getwd(), "\n",
file = sh.name, append = T
)
cat(
code.cellranger, sep = "",
file = sh.name, append = T
)
command <- paste0(
"cd ", getwd(),
"\nqsub ",
sh.name
)
system(command)
} else {
for (i in seq_along(IDs)) {
sh.name <- paste0(
Sys.Date(),
"_cellranger_",
IDs[i],"_",
stri_rand_strings(1,6),
".sh"
)
file.create(sh.name)
cat(pbs, file = sh.name)
cat(
"export PATH=$PATH:",
program.path, "\n",
file = sh.name, append = T
)
cat(
"cd", getwd(), "\n",
file = sh.name, append = T
)
cat(
code.cellranger[i], sep = "",
file = sh.name, append = T
)
command <- paste0(
"cd ", getwd(),
"\nqsub ",
sh.name
)
system(command)
}
}
}
message("Job submitted: ",sh.name)
RunCellranger <- function(
fastqs,
IDs,
spe,
program.path = NULL,
ref = NULL,
walltime = NULL,
project = NULL,
nodes = NULL,
ppn = NULL,
email = NULL,
sequential = F
) {
library(stringi)
if(!spe %in% c("mouse","human")) {
stop("'spe' must be 'mouse' or 'human'")
}
if(length(fastqs) != length(IDs)) {
stop("'fastqs' and 'IDs' must be the same length.")
}
pbs <- pbs.string(
walltime = walltime,
project = project,
nodes = nodes,
ppn = ppn,
email = email
)
message("PBS arguments:\n",pbs)
library(rlang)
opt <- vscjob_LoadConfig(global = F)
program.path <- program.path %||% opt$cellranger.program.path
if(is.null(ref)) {
ref <- switch(
spe,
mouse = opt$cellranger.ref.mouse,
human = opt$cellranger.ref.human)
}
message("CellRanger path: ", program.path, "\n",
"Reference genome path: ", ref, "\n")
check.sys.dir.exist(program.path)
check.sys.dir.exist(ref)
code.cellranger <- vector()
for (i in seq_along(IDs)) {
check.sys.dir.exist(fastqs[i])
code.cellranger[i] <- paste0(
"cellranger count --id=",IDs[i],
" --transcriptome=",ref,
" --fastqs=",fastqs[i],
" --expect-cells=5000 --jobmode=local --localcores=36 --localmem=180"
)
}
if(sequential) {
sh.name <- paste0(
Sys.Date(),
"_cellranger_",
stri_rand_strings(1,6),
".sh"
)
file.create(sh.name)
cat(pbs, file = sh.name)
cat(
"export PATH=$PATH:",
program.path, "\n",
file = sh.name, append = T
)
cat(
"cd", getwd(), "\n",
file = sh.name, append = T
)
cat(
code.cellranger, sep = "",
file = sh.name, append = T
)
command <- paste0(
"cd ", getwd(),
"\nqsub ",
sh.name
)
system(command)
message("Job submitted: ",sh.name)
} else {
for (i in seq_along(IDs)) {
sh.name <- paste0(
Sys.Date(),
"_cellranger_",
IDs[i],"_",
stri_rand_strings(1,6),
".sh"
)
file.create(sh.name)
cat(pbs, file = sh.name)
cat(
"export PATH=$PATH:",
program.path, "\n",
file = sh.name, append = T
)
cat(
"cd", getwd(), "\n",
file = sh.name, append = T
)
cat(
code.cellranger[i], sep = "",
file = sh.name, append = T
)
command <- paste0(
"cd ", getwd(),
"\nqsub ",
sh.name
)
system(command)
message("Job submitted: ",sh.name)
}
}
}
makeOxygen(RunCellranger)
roxygenize()
library(vscjob)
cat(
"export PATH=$PATH:",
program.path, "\n",ï¼‰
cat(
"export PATH=$PATH:",
program.path, "\n",)
cat(
"export PATH=$PATH:",
program.path, "\n")
cat(
"export PATH=$PATH:",
program.path, "\n", sep = "")
library(vscjob)
library(vscjob)
library(vscjob)
library(Seurat)
library(dplyr)
library(mosaic)
library(rlist)
library(purrr)
library(roxygen2)
library(sinew)
library(SeuratExtend)
options(max.print = 50, spe = "mouse", nCores = 12)
roxygenize()
library(vscjob)
check.sys.dir.exist <- function(x, nm = NULL){
path <- x
for (i in c("VSC_DATA","VSC_SCRATCH","VSC_HOME")) {
v1 <- paste0("${",i,"}")
if(grepl(v1, path, fixed = T)){
path <- sub(pattern = v1, replacement = Sys.getenv(i), x = path, fixed = T)
}
v2 <- paste0("$",i)
if(grepl(v2, path, fixed = T)){
path <- sub(v2, Sys.getenv(i), x = path, fixed = T)
}
}
if(!file.exists(path)) {
if(is.null(nm)){
stop("Directory '",x,"' does not exist.")
} else {
stop(nm, " directory '",x,"' does not exist.")
}
}
return(path)
}
makeOxygen(check.sys.dir.exist)
library(vscjob)
library(Seurat)
library(dplyr)
library(mosaic)
library(rlist)
library(purrr)
library(roxygen2)
library(sinew)
library(SeuratExtend)
options(max.print = 50, spe = "mouse", nCores = 12)
makeOxygen(check.sys.dir.exist)
?is_empty
library(rlang)
opt.default <- vscjob_LoadConfig(global = F)
opt.default
opt.new <- list()
if(is_empty(opt.new)){
message("Current config:")
return(opt.default)
}
is_empty(opt.new)
opt.nm <- names(opt.default)
opt.nm
opt.nm.new <- names(opt.new)
opt.nm.new
vscjob_SetConfig <- function(...){
library(rlang)
if(!file.exists("~/.vscjob.config")) {
vscjob_CreateConfig()
}
opt.default <- vscjob_LoadConfig(global = F)
opt.new <- list(...)
if(is_empty(opt.new)){
message("Current config:")
return(opt.default)
}
opt.nm <- names(opt.default)
opt.nm.new <- names(opt.new)
if(any(!opt.nm.new %in% opt.nm)) {
stop("Invalid name(s):",
paste0(setdiff(opt.nm.new, opt.nm), collapse = ", "))
}
}
vscjob_SetConfig()
vscjob_SetConfig(asdf = "a")
vscjob_SetConfig(cellranger.ref.human = "a")
vscjob_SetConfig(cellranger.ref.human = "a", cellranger.ref.mouse = "b")
vscjob_SetConfig(cellranger.ref.human = "a", cellranger.ref.mous123e = "b")
message("Set '",i,"' to '",opt.new[[i]],"'")
opt.nm.new
opt.towrite <- t(data.frame(opt.default))
opt.towrite
vscjob_SetConfig <- function(...){
library(rlang)
if(!file.exists("~/.vscjob.config")) {
vscjob_CreateConfig()
}
opt.default <- vscjob_LoadConfig(global = F)
opt.new <- list(...)
if(is_empty(opt.new)){
message("Current config:")
return(opt.default)
}
opt.nm <- names(opt.default)
opt.nm.new <- names(opt.new)
if(any(!opt.nm.new %in% opt.nm)) {
stop("Invalid name(s): ",
paste0(setdiff(opt.nm.new, opt.nm), collapse = ", "))
}
for (i in opt.nm.new) {
if(!grepl("^pbs",i)){
check.sys.dir.exist(opt.new[[i]], nm = i)
}
opt.default[[i]] <- opt.new[[i]]
message("Set '",i,"' to '",opt.new[[i]],"'")
}
opt.towrite <- t(data.frame(opt.default))
write.table(opt.towrite, file = "~/.vscjob.config",
row.names = T, sep = "=", quote = F, col.names = F)
return(opt.towrite)
}
makeOxygen(vscjob_SetConfig)
roxygenize()
roxygenize()
library(vscjob)
library(vscjob)
